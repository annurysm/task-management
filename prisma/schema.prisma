// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  organizations OrganizationMember[]
  teams         TeamMember[]
  assignedTasks Task[]
  createdTasks  Task[]               @relation("TaskCreator")
  createdEpics  Epic[]               @relation("EpicCreator")
  assignedSubtasks Subtask[]
  activities    ActivityLog[]
  dailyCheckins DailyCheckin[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members   OrganizationMember[]
  teams     Team[]
  epics     Epic[]
  labels    Label[]
  objectives Objective[]

  @@map("organizations")
}

model OrganizationMember {
  id             String           @id @default(cuid())
  userId         String
  organizationId String
  role           OrganizationRole @default(MEMBER)
  createdAt      DateTime         @default(now())

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("organization_members")
}

model Team {
  id             String   @id @default(cuid())
  name           String
  description    String?
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members      TeamMember[]
  epics        Epic[]
  tasks        Task[]
  kanbanColumns KanbanColumn[]
  dailyCheckins DailyCheckin[]

  @@map("teams")
}

model TeamMember {
  id        String   @id @default(cuid())
  userId    String
  teamId    String
  role      TeamRole @default(MEMBER)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("team_members")
}

model Epic {
  id             String     @id @default(cuid())
  title          String
  description    String?
  status         EpicStatus @default(PLANNING)
  organizationId String
  teamId         String?
  createdById    String
  dueDate        DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  team         Team?        @relation(fields: [teamId], references: [id], onDelete: SetNull)
  createdBy    User         @relation("EpicCreator", fields: [createdById], references: [id], onDelete: Cascade)
  tasks        Task[]
  objectives   ObjectiveTask[]

  @@map("epics")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(BACKLOG)
  priority    Priority   @default(MEDIUM)
  estimation  Float?     // in hours
  position    Float      @default(0)
  teamId      String
  epicId      String?
  assigneeId  String?
  createdById String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  team        Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  epic        Epic?       @relation(fields: [epicId], references: [id], onDelete: SetNull)
  assignee    User?       @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
  createdBy   User        @relation("TaskCreator", fields: [createdById], references: [id], onDelete: Cascade)
  subtasks    Subtask[]
  labels      TaskLabel[]
  objectives  ObjectiveTask[]
  taskUpdates TaskUpdate[]

  @@map("tasks")
}

model Subtask {
  id          String        @id @default(cuid())
  title       String
  description String?
  status      SubtaskStatus @default(TODO)
  estimation  Float?        // in hours
  position    Float         @default(0)
  taskId      String
  assigneeId  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  task      Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  assignee  User?       @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
  labels    SubtaskLabel[]

  @@map("subtasks")
}

model Label {
  id             String   @id @default(cuid())
  name           String
  color          String   // hex color
  organizationId String
  createdAt      DateTime @default(now())

  organization Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  tasks        TaskLabel[]
  subtasks     SubtaskLabel[]

  @@unique([name, organizationId])
  @@map("labels")
}

model TaskLabel {
  id      String @id @default(cuid())
  taskId  String
  labelId String

  task  Task  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  label Label @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@unique([taskId, labelId])
  @@map("task_labels")
}

model SubtaskLabel {
  id        String @id @default(cuid())
  subtaskId String
  labelId   String

  subtask Subtask @relation(fields: [subtaskId], references: [id], onDelete: Cascade)
  label   Label   @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@unique([subtaskId, labelId])
  @@map("subtask_labels")
}

model Objective {
  id             String   @id @default(cuid())
  title          String
  description    String?
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  tasks        ObjectiveTask[]
  weeklySyncs  WeeklySync[]

  @@map("objectives")
}

model ObjectiveTask {
  id            String    @id @default(cuid())
  objectiveId   String
  taskId        String?
  epicId        String?
  weekStartDate DateTime?
  weekPriority  Int?
  assignedTeam  String?
  isCommitted   Boolean   @default(false)
  createdAt     DateTime  @default(now())

  objective Objective @relation(fields: [objectiveId], references: [id], onDelete: Cascade)
  task      Task?     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  epic      Epic?     @relation(fields: [epicId], references: [id], onDelete: Cascade)

  @@map("objective_tasks")
}

model WeeklySync {
  id            String   @id @default(cuid())
  objectiveId   String
  weekStartDate DateTime
  notes         String?
  attendees     Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  objective Objective @relation(fields: [objectiveId], references: [id], onDelete: Cascade)

  @@map("weekly_syncs")
}

model KanbanColumn {
  id       String @id @default(cuid())
  title    String
  status   String
  color    String
  position Float  @default(0)
  teamId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([status, teamId])
  @@map("kanban_columns")
}

model ActivityLog {
  id         String       @id @default(cuid())
  action     String
  entityType EntityType
  entityId   String
  userId     String
  teamId     String?
  details    Json?        // additional data about the action
  createdAt  DateTime     @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
}

enum OrganizationRole {
  OWNER
  ADMIN
  MEMBER
}

enum TeamRole {
  LEAD
  MEMBER
}

enum EpicStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  IN_REVIEW
  ON_HOLD
  DONE
}

enum SubtaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ActivityType {
  CREATED
  UPDATED
  DELETED
  STATUS_CHANGED
  ASSIGNED
  UNASSIGNED
  MOVED
  COMMENTED
}

enum EntityType {
  TASK
  SUBTASK
  EPIC
  TEAM
  ORGANIZATION
  OBJECTIVE
}

model DailyCheckin {
  id        String   @id @default(cuid())
  userId    String
  teamId    String
  date      DateTime @default(now())
  
  // Main check-in questions
  yesterdayAccomplishments String
  todayGoals               String
  blockers                 String?
  mood                     String  // EXCELLENT, GOOD, OKAY, STRUGGLING
  energyLevel              Int     // 1-5 scale
  
  // Additional context
  notes                    String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  team         Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)
  taskUpdates  TaskUpdate[]

  @@unique([userId, teamId, date])
  @@map("daily_checkins")
}

model TaskUpdate {
  id              String   @id @default(cuid())
  dailyCheckinId  String
  taskId          String
  statusUpdate    String   // COMPLETED, IN_PROGRESS, BLOCKED, NOT_STARTED
  hoursWorked     Float?
  comments        String?
  createdAt       DateTime @default(now())

  dailyCheckin DailyCheckin @relation(fields: [dailyCheckinId], references: [id], onDelete: Cascade)
  task         Task         @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_updates")
}